##### 2) Simulate x_2 fake variable
x_2 <- rgamma(n=1000)
##### 2) Simulate x_2 fake variable
x_2 <- rgamma(n=1000, shape=10)
hist(x_2)
##### 2) Simulate x_2 fake variable
x_2 <- rgamma(n=1000, shape=10, theta=0.25)
##### 2) Simulate x_2 fake variable
x_2 <- rgamma(n=1000, shape=10, scale=0.25)
hist(x_2)
lm2 <- lm(y~x_2)
lm2
# Lm model fits both x_1 and x_2
lm3 <- lm(y~x_1+x_2)
lm3
summary(lm1)
summary(lm2)
summary(lm3)
# values with a mean of 5 and std. dev. of 7
hist(x_1, col="grey") # plot p(x)
hist(x_2)
##### 3) New variable z=(x_1)^2
z <- (x_1)^2
lm4 <- lm(y~z)
lm4
lm4 <- lm(y~x_1+z)
lm4
summary(lm4)
x_2[100:1000]
length(x_2[100:1000])
length(x_2[100:])
x_2[101:1000]
# Sample size
lm3.1 <- lm(y~x_1[101:1000], x_2[101:1000])
x_1[101:1000]
# Sample size
lm3.1 <- lm(y~x_1[101:1000], x_2[101:1000])
# Sample size
train_x1 <- x_1[101:1000]
train_x2 <- x_2[101:1000]
lm3.1 <- lm(y~train_x1, train_x2)
# Sample size
train_x1 <- ls(x_1[101:1000])
x_1
train_x1
# Sample size
train_x1 <- as.list(x_1[101:1000])
View(train_x1)
train_x2 <- as.list(x_2[101:1000])
lm3.1 <- lm(y~train_x1, train_x2)
lm3.1 <- lm(y~train_x1+train_x2)
# Sample size
train_x1 <- x_1[101:1000]
train_x2 <- x_2[101:1000]
lm3.1 <- lm(y~train_x1+train_x2)
lm3.1 <- lm(y[101:1000]~train_x1+train_x2)
rm(train_x1)
rm(train_x2)
# Sample size
lm3.1 <- lm(y[101:1000]~x_1[101:1000]+x_2[101:1000])
coef(lm3.1)
coef(lm3.1)[1]
y_test <- coef(lm3.1)[1]+(coef(lm3.1)[2]*x_1[1:100])+(coef(lm3.1)[2]*x_2[1:100])
e <- y[1:100]-y_test
sum(e^2)
sum(e^2)/(n-2)
# Mean square error (MSE)
n <- 100
sum(e^2)/(n-2)
# Sample size
lm2.1 <- lm(y[101:1000]~+x_2[101:1000])
coef(lm2.1)
# Predicted y
y_test <- coef(lm2.1)[1]+(coef(lm2.1)[2]*x_2[1:100])
# Residual calculation
e <- y[1:100]-y_test
# Mean square error (MSE)
n <- 100
sum(e^2)/(n-2)
rm(MSE)
MSE1 <- sum(e^2)/(n-2)
MSE1
# Lm model fits both x_1 and x_2
lm3 <- lm(y~x_1+x_2)
lm3
summary(lm3)
# Sample size
lm3.1 <- lm(y[101:1000]~x_1[101:1000]+x_2[101:1000])
coef(lm3.1)
# Predicted y
y_test <- coef(lm3.1)[1]+(coef(lm3.1)[2]*x_1[1:100])+(coef(lm3.1)[2]*x_2[1:100])
# Residual calculation
e <- y[1:100]-y_test
# Mean square error (MSE)
n <- 100
MSE2 <- sum(e^2)/(n-2)
MSE2
##### 3) New variable z=(x_1)^2
z <- (x_1)^2
lm4 <- lm(y~x_1+z)
lm4
summary(lm4)
# Sample size
lm4.1 <- lm(y[101:1000]~x_1[101:1000]+z[101:1000])
coef(lm4.1)
# Predicted y
y_test <- coef(lm4.1)[1]+(coef(lm4.1)[2]*x_1[1:100])+(coef(lm4.1)[2]*z[1:100])
# Residual calculation
e <- y[1:100]-y_test
# Mean square error (MSE)
n <- 100
MSE3 <- sum(e^2)/(n-2)
MSE3
##### 4) Play around distribution
x_3 <- rnorm(1000,10,1)  # From a normal distribution simulate 1000
# values with a mean of 5 and std. dev. of 7
hist(x_3, col="grey") # plot p(x)
true_error <- rnorm(1000,0,2)
hist(true_error)
true_error <- rnorm(1000,0,1)
hist(true_error)
true_error <- rnorm(1000,10,2)
hist(true_error)
true_error <- rnorm(1000,0,2)
hist(true_error)
##### 4) Play around distribution
x_3 <- rnorm(1000,10,1)  # From a normal distribution simulate 1000
# values with a mean of 5 and std. dev. of 7
hist(x_3, col="grey") # plot p(x)
true_error <- rnorm(1000,0,2)
hist(true_error)
true_beta0 <- 1
true_beta1 <- 2.4
y_2 <- true_beta0 + true_beta1*x_3 + true_error
hist(y_2) # plot p(y)
plot(x_2, y, pch=20, col="red") # plot p(x,y)
plot(x_3, y, pch=20, col="red") # plot p(x,y)
##### 4) Play around distribution
x_3 <- rnorm(1000,10,5)  # From a normal distribution simulate 1000
# values with a mean of 5 and std. dev. of 7
hist(x_3, col="grey") # plot p(x)
true_error <- rnorm(1000,0,2)
hist(true_error)
true_beta0 <- 1
true_beta1 <- 2.4
y_2 <- true_beta0 + true_beta1*x_3 + true_error
hist(y_2) # plot p(y)
plot(x_3, y, pch=20, col="red") # plot p(x,y)
true_error <- rnorm(1000,1,2)
hist(true_error)
true_beta0 <- 1
true_beta1 <- 2.4
y_2 <- true_beta0 + true_beta1*x_3 + true_error
hist(y_2) # plot p(y)
plot(x_3, y, pch=20, col="red") # plot p(x,y)
##### 5) Scatterplots
plot(y, x_1)
plot(y, x_2)
plot(y, x_3)
plot(y, z)
m = leaflet() %>% addTiles()
library(leaflet)
m = leaflet() %>% addTiles()
df = data.frame(
lat = rnorm(100),
lng = rnorm(100),
size = runif(100, 5, 20),
color = sample(colors(), 100)
)
m = leaflet(df) %>% addTiles()
m %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
m %>% addCircleMarkers(radius = runif(100, 4, 10), color = c('red'))
addTiles()
leaflet(addTiles())
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
View(m)
m %>% addTiles()
names(providers)
providers$
providers$OpenStreetMap
providers$Stamen.Toner
m %>% addProviderTiles(providers$Stamen.Toner)
m %>% addProviderTiles(providers$CartoDB.Positron)
m %>% addProviderTiles(providers$Esri.NatGeoWorldMap)
leaflet() %>% addTiles() %>% setView(-93.65, 42.0285, zoom = 4) %>%
addWMSTiles(
"http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi",
layers = "nexrad-n0r-900913",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data Â© 2012 IEM Nexrad"
)
m %>% addProviderTiles(providers$MtbMap) %>%
addProviderTiles(providers$Stamen.TonerLines,
options = providerTileOptions(opacity = 0.35)) %>%
addProviderTiles(providers$Stamen.TonerLabels)
data(quakes)
force(quakes)
# Show first 20 rows from the `quakes` dataset
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag), label = ~as.character(mag))
greenLeafIcon <- makeIcon(
iconUrl = "http://leafletjs.com/examples/custom-icons/leaf-green.png",
iconWidth = 38, iconHeight = 95,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "http://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62
)
greenLeafIcon
leaflet(data = quakes[1:4,]) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = greenLeafIcon)
quakes1 <- quakes[1:10,]
quakes1
leafIcons <- icons(
iconUrl = ifelse(quakes1$mag < 4.6,
"http://leafletjs.com/examples/custom-icons/leaf-green.png",
"http://leafletjs.com/examples/custom-icons/leaf-red.png"
),
iconWidth = 38, iconHeight = 95,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "http://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62
)
leaflet(data = quakes1) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = leafIcons)
quakes1 <- quakes[1:1,]
quakes1
leafIcons <- icons(
iconUrl = ifelse(quakes1$mag < 4.6,
"http://leafletjs.com/examples/custom-icons/leaf-green.png",
"http://leafletjs.com/examples/custom-icons/leaf-red.png"
),
iconWidth = 38, iconHeight = 95,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "http://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62
)
leaflet(data = quakes1) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = leafIcons)
quakes1 <- quakes[1:10,]
leafIcons <- icons(
iconUrl = ifelse(quakes1$mag < 4.6,
"http://leafletjs.com/examples/custom-icons/leaf-green.png",
"http://leafletjs.com/examples/custom-icons/leaf-red.png"
),
iconWidth = 38, iconHeight = 95,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "http://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62
)
leaflet(data = quakes1) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = leafIcons)
# Make a list of icons. We'll index into it based on name.
oceanIcons <- iconList(
ship = makeIcon("ferry-18.png", "ferry-18@2x.png", 18, 18),
pirate = makeIcon("danger-24.png", "danger-24@2x.png", 24, 24)
)
oceanIcons
View(oceanIcons)
# Some fake data
df <- sp::SpatialPointsDataFrame(
cbind(
(runif(20) - .5) * 10 - 90.620130,  # lng
(runif(20) - .5) * 3.8 + 25.638077  # lat
),
data.frame(type = factor(
ifelse(runif(20) > 0.75, "pirate", "ship"),
c("ship", "pirate")
))
)
df
leaflet(df) %>% addTiles() %>%
# Select from oceanIcons based on df$type
addMarkers(icon = ~oceanIcons[type])
# Some fake data
df <- sp::SpatialPointsDataFrame(
cbind(
(runif(20) - .5) * 10 - 90.620130,  # lng
(runif(20) - .5) * 3.8 + 25.638077  # lat
),
data.frame(type = factor(
ifelse(runif(20) > 0.75, "pirate", "ship"),
c("ship", "pirate")
))
)
leaflet(df) %>% addTiles() %>%
# Select from oceanIcons based on df$type
addMarkers(icon = ~oceanIcons[type])
# first 20 quakes
df.20 <- quakes[1:20,]
df.20
getColor <- function(quakes) {
sapply(quakes$mag, function(mag) {
if(mag <= 4) {
"green"
} else if(mag <= 5) {
"orange"
} else {
"red"
} })
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(df.20)
)
icons
leaflet(df.20) %>% addTiles() %>%
addAwesomeMarkers(~long, ~lat, icon=icons, label=~as.character(mag))
leaflet(quakes) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
leaflet(quakes) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions(freezeAtZoom = 5)
)
leaflet(quakes) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions(freezeAtZoom = 1)
)
leaflet(quakes) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions(freezeAtZoom = 10)
)
leaflet(df) %>% addTiles() %>% addCircleMarkers()
# Create a palette that maps factor levels to colors
pal <- colorFactor(c("navy", "red"), domain = c("ship", "pirate"))
pal
?colorFactory
??colorFactory
leaflet(df) %>% addTiles() %>%
addCircleMarkers(
radius = ~ifelse(type == "ship", 6, 10),
color = ~pal(type),
stroke = FALSE, fillOpacity = 0.5
)
df
content <- paste(sep = "<br/>",
"<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>",
"606 5th Ave. S",
"Seattle, WA 98138"
)
content
leaflet() %>% addTiles() %>%
addPopups(-122.327298, 47.597131, content,
options = popupOptions(closeButton = FALSE)
)
leaflet() %>% addTiles() %>%
addPopups(-122.327298, 47.597131, content,
options = popupOptions(closeButton = TRUE)
)
library(htmltools)
df <- read.csv(textConnection(
"Name,Lat,Long
Samurai Noodle,47.597131,-122.327298
Kukai Ramen,47.6154,-122.327157
Tsukushinbo,47.59987,-122.326726"
))
df
leaflet(df) %>% addTiles() %>%
addMarkers(~Long, ~Lat, popup = ~htmlEscape(Name))
leaflet(df) %>% addTiles() %>%
addMarkers(~Long, ~Lat, label = ~htmlEscape(Name))
# Change Text Size and text Only and also a custom CSS
leaflet() %>% addTiles() %>% setView(-118.456554, 34.09, 13) %>%
addMarkers(
lng = -118.456554, lat = 34.105,
label = "Default Label",
labelOptions = labelOptions(noHide = T)) %>%
addMarkers(
lng = -118.456554, lat = 34.095,
label = "Label w/o surrounding box",
labelOptions = labelOptions(noHide = T, textOnly = TRUE)) %>%
addMarkers(
lng = -118.456554, lat = 34.085,
label = "label w/ textsize 15px",
labelOptions = labelOptions(noHide = T, textsize = "15px")) %>%
addMarkers(
lng = -118.456554, lat = 34.075,
label = "Label w/ custom CSS style",
labelOptions = labelOptions(noHide = T, direction = "bottom",
style = list(
"color" = "red",
"font-family" = "serif",
"font-style" = "italic",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"font-size" = "12px",
"border-color" = "rgba(0,0,0,0.5)"
)))
# Change Text Size and text Only and also a custom CSS
leaflet() %>% addTiles() %>% setView(-118.456554, 34.09, 13) %>%
addMarkers(
lng = -118.456554, lat = 34.105,
label = "Default Label",
labelOptions = labelOptions(noHide = F)) %>%
addMarkers(
lng = -118.456554, lat = 34.095,
label = "Label w/o surrounding box",
labelOptions = labelOptions(noHide = T, textOnly = TRUE)) %>%
addMarkers(
lng = -118.456554, lat = 34.085,
label = "label w/ textsize 15px",
labelOptions = labelOptions(noHide = T, textsize = "15px")) %>%
addMarkers(
lng = -118.456554, lat = 34.075,
label = "Label w/ custom CSS style",
labelOptions = labelOptions(noHide = T, direction = "bottom",
style = list(
"color" = "red",
"font-family" = "serif",
"font-style" = "italic",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"font-size" = "12px",
"border-color" = "rgba(0,0,0,0.5)"
)))
# Change Text Size and text Only and also a custom CSS
leaflet() %>% addTiles() %>% setView(-118.456554, 34.09, 13) %>%
addLabelOnlyMarkers(
lng = -118.456554, lat = 34.105,
label = "Default Label",
labelOptions = labelOptions(noHide = T)) %>%
addMarkers(
lng = -118.456554, lat = 34.095,
label = "Label w/o surrounding box",
labelOptions = labelOptions(noHide = T, textOnly = TRUE)) %>%
addMarkers(
lng = -118.456554, lat = 34.085,
label = "label w/ textsize 15px",
labelOptions = labelOptions(noHide = T, textsize = "15px")) %>%
addMarkers(
lng = -118.456554, lat = 34.075,
label = "Label w/ custom CSS style",
labelOptions = labelOptions(noHide = T, direction = "bottom",
style = list(
"color" = "red",
"font-family" = "serif",
"font-style" = "italic",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"font-size" = "12px",
"border-color" = "rgba(0,0,0,0.5)"
)))
library(rgdal)
install.packages("rgdal")
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
states <- readOGR("shp/cb_2013_us_state_20m.shp",
layer = "cb_2013_us_state_20m",
GDAL1_integer64_policy = TRUE)
library(rgdal)
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
states <- readOGR("shp/cb_2013_us_state_20m.shp",
layer = "cb_2013_us_state_20m",
GDAL1_integer64_policy = TRUE)
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
states <- readOGR("shp/cb_2013_us_state_20m.shp",
layer = "cb_2013_us_state_20m", GDAL1_integer64_policy = TRUE)
library(albersusa)
install.packages("albersusa")
library(albersusa)
cities <- read.csv(textConnection("
City,Lat,Long,Pop
Boston,42.3601,-71.0589,645966
Hartford,41.7627,-72.6743,125017
New York City,40.7127,-74.0059,8406000
Philadelphia,39.9500,-75.1667,1553000
Pittsburgh,40.4397,-79.9764,305841
Providence,41.8236,-71.4222,177994
"))
cities
leaflet(cities) %>% addTiles() %>%
addCircles(lng = ~Long, lat = ~Lat, weight = 1,
radius = ~sqrt(Pop) * 30, popup = ~City
)
leaflet(cities) %>% addTiles() %>%
addCircles(lng = ~Long, lat = ~Lat, weight = 1,
radius = ~sqrt(Pop), popup = ~City
)
* 30
leaflet(cities) %>% addTiles() %>%
addCircles(lng = ~Long, lat = ~Lat, weight = 1,
radius = ~sqrt(Pop) * 30, popup = ~City
)
leaflet() %>% addTiles() %>%
addRectangles(
lng1=-118.456554, lat1=34.078039,
lng2=-118.436383, lat2=34.062717,
fillColor = "transparent"
)
R.Version()
R.Version()
R.Version()
library(caret)
library(MASS)
library(e1071)
library(psych)
library(corrplot)
library(corrgram)
library(ISLR)
Data("Credit")
install.packages("rsconnect")
shiny::runApp('U.S. Border Activity')
rsconnect::setAccountInfo(name='ekayfabio', token='85512D65004DA9696F6F58667323FCAB', secret='wz97XMx7Lav/nCY7zVifkMShfU8qV6qazHYQEyqc')
runApp('U.S. Border Activity')
shiny::runApp('U.S. Border Activity')
shiny::runApp('U.S. Border Activity')
View(case_study_clust)
runApp('U.S. Border Activity')
runApp('U.S. Border Activity')
runApp('U.S. Border Activity')
setwd("~/Documents/SCHOOL/BDA/Thesis")
runApp('U.S. Border Activity')
